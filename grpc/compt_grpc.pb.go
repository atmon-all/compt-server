// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0--rc2
// source: compt.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComptClient is the client API for Compt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComptClient interface {
	// Flow executed finished.
	FlowFinish(ctx context.Context, in *FlowFinishRequest, opts ...grpc.CallOption) (*FlowFinishResponse, error)
}

type comptClient struct {
	cc grpc.ClientConnInterface
}

func NewComptClient(cc grpc.ClientConnInterface) ComptClient {
	return &comptClient{cc}
}

func (c *comptClient) FlowFinish(ctx context.Context, in *FlowFinishRequest, opts ...grpc.CallOption) (*FlowFinishResponse, error) {
	out := new(FlowFinishResponse)
	err := c.cc.Invoke(ctx, "/compt.Compt/FlowFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComptServer is the server API for Compt service.
// All implementations must embed UnimplementedComptServer
// for forward compatibility
type ComptServer interface {
	// Flow executed finished.
	FlowFinish(context.Context, *FlowFinishRequest) (*FlowFinishResponse, error)
	mustEmbedUnimplementedComptServer()
}

// UnimplementedComptServer must be embedded to have forward compatible implementations.
type UnimplementedComptServer struct {
}

func (UnimplementedComptServer) FlowFinish(context.Context, *FlowFinishRequest) (*FlowFinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowFinish not implemented")
}
func (UnimplementedComptServer) mustEmbedUnimplementedComptServer() {}

// UnsafeComptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComptServer will
// result in compilation errors.
type UnsafeComptServer interface {
	mustEmbedUnimplementedComptServer()
}

func RegisterComptServer(s grpc.ServiceRegistrar, srv ComptServer) {
	s.RegisterService(&Compt_ServiceDesc, srv)
}

func _Compt_FlowFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComptServer).FlowFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compt.Compt/FlowFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComptServer).FlowFinish(ctx, req.(*FlowFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Compt_ServiceDesc is the grpc.ServiceDesc for Compt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Compt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compt.Compt",
	HandlerType: (*ComptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FlowFinish",
			Handler:    _Compt_FlowFinish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compt.proto",
}
